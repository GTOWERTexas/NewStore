@page "{id}"
@model EditorModel
<h5 class = "bg-primary text-white text-center p-2">Edit User</h5>
<form method = "post">
    <div asp-validation-summary = "All" class = "text-danger"></div>
    <div class = "form-group">
        <label>ID</label>
        <input name = "Id" class = "form-control" value = "@Model.Id" disabled></input>
         <input name = "Id"  value = "@Model.Id" type = "hidden"></input>
    </div> 
    <div class = "form-group">
        <label>User Name</label>
        <input name = "UserName" class = "form-control" value = "@Model.UserName"></input>
    </div> 
    <div class = "form-group">
        <label>Email</label>
        <input name = "Email" class = "form-control" value = "@Model.Email"></input>
    </div> 
    <div class = "form-group">
        <label>New Password</label>
        <input name = "Password" class = "form-control" value = "@Model.Password"></input>
    </div> 
    <button type = "submit" class = "btn btn-primary">Submit</button>
    <a class = "btn btn-secondary" asp-page = "List">Back</a>
</form>

@functions{
    // поддежа редакирования пользователей
    public class EditorModel : AdminPageModel
    {
        public UserManager<IdentityUser> UserManager;
        public EditorModel(UserManager<IdentityUser> userManager)
        {
            UserManager = userManager;
        }
        [BindProperty] [Required]
        public string Id { get; set; }
        [BindProperty] [Required]
        public string UserName { get; set; }
        [BindProperty] [Required] [EmailAddress]
        public string Email { get; set; }
        [BindProperty] 
        public string Password { get; set; }

        public async Task OnGetAsync(string id)
        {
            IdentityUser user = await UserManager.FindByIdAsync(id);
            Id = user.Id; UserName = user.UserName; Email = user.Email; 
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                IdentityUser user = await UserManager.FindByIdAsync(Id);
                user.UserName = UserName;
                user.Email = Email;
                IdentityResult result = await UserManager.CreateAsync(user);
                if (result.Succeeded && !String.IsNullOrEmpty(Password))
                {
                    await UserManager.RemovePasswordAsync(user);
                    result =await UserManager.AddPasswordAsync(user, Password);
                }
                if(result.Succeeded)
                {
                     return RedirectToPage("List");
                }
                foreach(IdentityError err in result.Errors)
                {
                    ModelState.AddModelError("", err.Description);
                }
            }
            return Page();
        }
    }
}
